//this script is an example of how to make a command module, and how to implement a role check to limit that command to only the people within the desired role


string HELP_STRING = "\ncommand : description\n.whois [name] : access any notes written about [name]\n.roll [sides] : roll a die with [sides] sides\n.music [stream] : set parcel stream\n.arrest [uuid]: submit a vote for Citizen's Arrest\n.drink : get a drink!\n.help : uh...";

///////////////////////////////////////////////////////////////////////////
///WaS fuctions


string wasKeyValueGet(string k, string data) {
    if(llStringLength(data) == 0) return "";
    if(llStringLength(k) == 0) return "";
    list a = llParseString2List(data, ["&", "="], []);
    integer i = llListFindList(llList2ListStrided(a, 0, -1, 2), [ k ]);
    if(i != -1) return llList2String(a, 2*i+1);
    return "";
}

string wasKeyValueEncode(list data) {
    integer i = llGetListLength(data);
    if (i % 2 != 0 || i == 0) return "";
    --i;
    do {
        data = llListInsertList(
            llDeleteSubList(
                data, 
                i-1, 
                i
            ),
            [ llList2String(data, i-1) + "=" + llList2String(data, i) ], 
            i-1
        );
        i -= 2;
    } while(i > 0);
    return llDumpList2String(data, "&");
}

string wasURLEscape(string i) {
    if(i == "") return "";
    string o = llGetSubString(i, 0, 0);
    i = llDeleteSubString(i, 0, 0);
    if(o == " ") return "+" + wasURLEscape(i);
    if(o == "\n") return "%0D%0A" + wasURLEscape(i);
    return llEscapeURL(o) + wasURLEscape(i); 
}

string wasURLUnescape(string i) {
    return llUnescapeURL(
        llDumpList2String(
            llParseString2List(
                llDumpList2String(
                    llParseString2List(
                        i, 
                        ["+"], 
                        []
                    ), 
                    " "
                ), 
                ["%0D%0A"], 
                []
            ), 
            "\n"
        )
    );
}

string wasListToCSV(list l) {
    list v = [];
    do {
        string a = llDumpList2String(
            llParseStringKeepNulls(
                llList2String(
                    l, 
                    0
                ), 
                ["\""], 
                []
            ),
            "\"\""
        );
        if(llParseStringKeepNulls(
            a, 
            [" ", ",", "\n", "\""], []
            ) != 
            (list) a
        ) a = "\"" + a + "\"";
        v += a;
        l = llDeleteSubList(l, 0, 0);
    } while(l != []);
    return llDumpList2String(v, ",");
} 

list wasKeyValueDecode(string data) {
    return llParseString2List(data, ["&", "="], []);
}

///////////////////////////////////////////////////////////////////////////


tell(string notification, string message, string entity)
{
    //llOwnerSay("TELL: "+notification);
llInstantMessage((key)wasKeyValueGet("corrade",notification),
    wasKeyValueEncode(
        [
            "command", "tell",
            "group", wasKeyValueGet("group",notification),
            "password", wasKeyValueGet("group_pass",notification),
            "message", message,
            "entity", entity,
            "target", wasKeyValueGet("group_id",notification)
        ]
    )
);
}

groupSay(string notification, string message)
{
    tell(notification, message,"group");  
}

regionAlert(string notification, string message)
{
    tell(notification, message,"region"); 
}


list uWasURLUnescapeList(list l)
{
    integer i;
    integer len = llGetListLength(l);
    for(;i<len;i++)
        l += wasURLUnescape(llList2String(l,i));
    return llList2List(l,len+1,-1);
}


makeAuthCheck(string notification, string role)
{
   // llOwnerSay("N: "+notification);
    llInstantMessage(wasKeyValueGet("corrade",notification),
    wasKeyValueEncode(
        [
            "command", "getmemberroles",
            "group", wasKeyValueGet("group",notification),
            "password", wasKeyValueGet("group_pass",notification),
            "group_id", wasKeyValueGet("group_id",notification),
            "agent", wasKeyValueGet("agent",notification),
            //"notification", "agent" +"|"+ wasKeyValueGet("agent",notification) +"|"+ "message" +"|"+ wasKeyValueGet("message",notification),
            "notification", llDumpList2String(llParseString2List(notification,["&","="],[]),"|"),
            "required_role",role,           
            "callback", wasKeyValueGet("url",notification)
        ]
    )
);    
}

default
{
    on_rez(integer start_param)
    {
        llResetScript();    
    }

    link_message(integer sender_num, integer num, string str, key id)
    {
        if(str != llGetScriptName())
            return;
        string body = (string)id;
        string command = wasURLUnescape(wasKeyValueGet("command",body));
        string group = wasURLUnescape(wasKeyValueGet("group",body));
        key agent = (key)wasURLUnescape(wasKeyValueGet("agent",body));
        string message = wasURLUnescape(wasKeyValueGet("message",body));
        if(message == llGetScriptName())
        {
            if(num == -1)
            {
                groupSay(body,"authorizing..."); 
                makeAuthCheck(body,"Owners"); 
            }
            
            else if(!num)
            {
                groupSay(body,"You do not have the required role to use this function.");   
            }
            else
            {
                groupSay(body,"Hello, world!");  
            }  
        }
    }
    
    changed(integer change)
    {
        if(change & CHANGED_INVENTORY)
            llResetScript();    
    }
}
