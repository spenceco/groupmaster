string HELP_STRING = "\ncommand : description\n.whois [name] : access any notes written about [name]\n.roll [sides] : roll a die with [sides] sides\n.music [stream] : set parcel stream\n.arrest [uuid]: submit a vote for Citizen's Arrest\n.drink : get a drink!\n.help : uh...";

///////////////////////////////////////////////////////////////////////////
///WaS fuctions


string wasKeyValueGet(string k, string data) {
    if(llStringLength(data) == 0) return "";
    if(llStringLength(k) == 0) return "";
    list a = llParseString2List(data, ["&", "="], []);
    integer i = llListFindList(llList2ListStrided(a, 0, -1, 2), [ k ]);
    if(i != -1) return llList2String(a, 2*i+1);
    return "";
}

string wasKeyValueEncode(list data) {
    integer i = llGetListLength(data);
    if (i % 2 != 0 || i == 0) return "";
    --i;
    do {
        data = llListInsertList(
            llDeleteSubList(
                data, 
                i-1, 
                i
            ),
            [ llList2String(data, i-1) + "=" + llList2String(data, i) ], 
            i-1
        );
        i -= 2;
    } while(i > 0);
    return llDumpList2String(data, "&");
}


string wasURLUnescape(string i) {
    return llUnescapeURL(
        llDumpList2String(
            llParseString2List(
                llDumpList2String(
                    llParseString2List(
                        i, 
                        ["+"], 
                        []
                    ), 
                    " "
                ), 
                ["%0D%0A"], 
                []
            ), 
            "\n"
        )
    );
}



///////////////////////////////////////////////////////////////////////////


tell(string notification, string message, string entity)
{
    //llOwnerSay("TELL: "+notification);
llInstantMessage((key)wasKeyValueGet("corrade",notification),
    wasKeyValueEncode(
        [
            "command", "tell",
            "group", wasKeyValueGet("group",notification),
            "password", wasKeyValueGet("group_pass",notification),
            "message", message,
            "entity", entity,
            "target", wasKeyValueGet("group_id",notification)
        ]
    )
);
}

groupSay(string notification, string message)
{
    tell(notification, message,"group");  
}


makeAuthCheck(string notification, string role)
{
   // llOwnerSay("N: "+notification);
    llInstantMessage(wasKeyValueGet("corrade",notification),
    wasKeyValueEncode(
        [
            "command", "getmemberroles",
            "group", wasKeyValueGet("group",notification),
            "password", wasKeyValueGet("group_pass",notification),
            "group_id", wasKeyValueGet("group_id",notification),
            "agent", wasKeyValueGet("agent",notification),
            "notification", llDumpList2String(llParseString2List(notification,["&","="],[]),"|"),
            "auth_check", "True",//add this parameter so the main script knows how to handle the response
            "required_role",role,//add this parameter so the script knows which role to look for in the response        
            "callback", wasKeyValueGet("url",notification)
        ]
    )
);    
}

default
{
    on_rez(integer start_param)
    {
        llResetScript();    
    }

    link_message(integer sender_num, integer num, string str, key id)
    {
        if(str != llGetScriptName())
            return;
        
        string body = (string)id;
        string command = wasURLUnescape(wasKeyValueGet("command",body));
        string group = wasURLUnescape(wasKeyValueGet("group",body));
        key agent = (key)wasURLUnescape(wasKeyValueGet("agent",body));
        string message = wasURLUnescape(wasKeyValueGet("message",body));
        string required = wasURLUnescape(wasKeyValueGet("required_role",body));
        list roles = llCSV2List(wasKeyValueGet("roles",body));
            
            
            
            
        if(command == "getmemberroles")//is an auth check
        {   
            list roles = llCSV2List(wasURLUnescape(wasKeyValueGet("data",body)));
            string required = wasURLUnescape(wasKeyValueGet("required_role",body));
            // list params = llParseString2List(wasKeyValueGet("required_role",body));
            if(~llListFindList(roles,[required]))
                groupSay(body,"Hello, world!"); 
            else
                groupSay(body,"You do not have the required role to use this function.");
        }
            
            
        else
        {
            groupSay(body,"authorizing..."); 
            makeAuthCheck(body,"Owners"); 
        }
                
    }
    
    changed(integer change)
    {
        if(change & CHANGED_INVENTORY)
            llResetScript();    
    }
}
